#include <iostream>
using namespace std;

// Definition of a node in a doubly linked list
struct Node {
    int data;
    Node* prev;
    Node* next;

    // Constructor to initialize a node
    Node(int val) {
        data = val;
        prev = nullptr;
        next = nullptr;
    }
};

// Class representing the doubly linked list
class DoublyLinkedList {
private:
    Node* head;  // Pointer to the first node (head) of the list

public:
    // Constructor to initialize the list
    DoublyLinkedList() {
        head = nullptr;
    }

    // Function to insert a node at the end of the doubly linked list
    void insertNode(int value) {
        Node* newNode = new Node(value);
        
        if (head == nullptr) {
            head = newNode;  // If the list is empty, make newNode the head
        } else {
            Node* temp = head;
            while (temp->next != nullptr) {
                temp = temp->next;  // Traverse to the last node
            }
            temp->next = newNode;  // Link the new node to the last node
            newNode->prev = temp;  // Set the previous pointer of the new node
        }
    }

    // Function to display the nodes of the doubly linked list
    void displayList() {
        if (head == nullptr) {
            cout << "The list is empty!" << endl;
            return;
        }

        Node* temp = head;
        cout << "Doubly Linked List: ";
        while (temp != nullptr) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }

    // Destructor to free up memory (avoid memory leak)
    ~DoublyLinkedList() {
        Node* current = head;
        Node* nextNode;

        while (current != nullptr) {
            nextNode = current->next;
            delete current;  // Free the current node
            current = nextNode;
        }
    }
};

int main() {
    DoublyLinkedList list;

    int n, value;
    cout << "Enter the number of elements in the doubly linked list: ";
    cin >> n;

    cout << "Enter the elements:" << endl;
    for (int i = 0; i < n; i++) {
        cin >> value;
        list.insertNode(value);  // Insert the node with the given value
    }

    // Display the doubly linked list
    list.displayList();

    return 0;
}
