/*

//bubble sort

#include<bits/stdc++.h>
using namespace std;

int main()
{
    int n;
    cin>>n;int arr[n];

    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }

    int cnt=1;

    while( cnt<n)
    {
        for( int i=0;i<n-cnt;i++)
        {
            if( arr[i]>arr[i+1])
            {
                swap( arr[i], arr[i+1]);
            }
        }cnt++;
    }


    for( int i=0;i<n;i++)
    {
        cout<<arr[i]<<" ";
    }
    cout<<endl;
}

*/


/*

//selection sort


#include<bits/stdc++.h>
using namespace std;

int main()
{
    int n;
    cin>>n;

    int arr[n];

    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }


    for( int i=0;i<n-1;i++)
    {
        for( int j=i+1;j<n;j++)
        {
            if( arr[j]<arr[i])
            {
                swap( arr[j], arr[i]);
            }
        }
    }

    for( int i=0;i<n;i++)
    {
        cout<<arr[i]<<" ";
    }cout<<endl;
}
*/

/*  insertion sort


#include<bits/stdc++.h>
using namespace std;


int main()
{
   string s;
    cin>>s;

    for( int i=1;i<s.size();i++)
    {
        int current = s[i];

        int j=i-1;

    while( s[j]>current && j>=0)
    {
        s[j+1]=s[j];
        j--;
    }

    s[j+1]=current;
}

for( int i=0;i<s.size();i++)
{
    cout<<s[i];
}cout<<endl;
}
*/

/*

//merge sort

#include<bits/stdc++.h>
using namespace std;

void conquer( int arr[], int s, int mid, int e)
{
    int mergedSize= e-s+1; // size =no_of_index +1

    int *merged =new int [mergedSize];  // vip line.



    int idx1=s,x=0; // s is the 0 th idex of first half sorted array

    int idx2 = mid+1; // idx2 is the first index of the 2nd half sorted array .


    while( idx1<=mid && idx2<=e)
    {
        if( arr[idx1]<=arr[idx2]){

            merged[x++]= arr[idx1++];
        }
        else {
            merged[x++]= arr[idx2++];
        }
    }

    while( idx1<=mid)
    {
        merged[x++]= arr[idx1++];
    }

    while( idx2<=e)
    {
        merged [x++]= arr[idx2++];
    }

    for(int i=0,j=s;i<mergedSize; i++,j++)
    {
        arr[j]=merged[i];
    }

    delete [] merged; // delete merged array .


    }

void divide ( int arr[], int s, int e)
{
    if( s>=e){return ;}
    int mid = s+ (e-s)/2;

    divide( arr, s, mid); // recursively sort the first half
    divide( arr, mid+1, e);// recursively sort the second half

    conquer( arr, s, mid, e);// merged the sorted 2 halves.
}

int main()
{
    int n;
    cin>>n;

    int arr[n];

    for( int i=0;i<n;i++)
    {
        cin>>arr[i];
    }

    divide( arr, 0, n-1);  // start index=0, end index=n-1.

    for( int i=0;i<n;i++)
    {
        cout<<arr[i]<<" ";
    }
    cout<<endl;


}


*/

/*

//quick sort

#include <bits/stdc++.h>
using namespace std;

// Partition function for QuickSort
int partitioned (int arr[], int s, int e) {  //  after this function finish: we get
    int pivot = arr[e]; // Use the last element as the pivot
    int i = s - 1;      // Index for smaller elements

    for (int j = s; j <= e - 1; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(arr[i], arr[j]); // Swap elements
        }
    }

    // Place the pivot in the correct position
    i++;
    swap(arr[i], arr[e]);
    return i; // Return pivot index
}


void quickSort(int arr[], int s, int e) {
    if (s >= e) {
        return; // Base case
    }

    int pivot = partitioned(arr, s, e); // Partition the array

    quickSort(arr, s, pivot - 1); // Recursively sort the left part
    quickSort(arr, pivot + 1, e); // Recursively sort the right part
}

int main() {
    int arr[] = {8, 2, 5, 3, 9, 4, 7, 6, 1};
    int n = sizeof(arr) / sizeof(arr[0]); // Get the size of the array

    quickSort(arr, 0, n - 1); // Call QuickSort

    // Print the sorted array
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    return 0;
}


*/


