#include <iostream>
using namespace std;

// Node definition for the linked list
struct Node {
    int data;
    Node* next;

    Node(int val) {
        data = val;
        next = nullptr;
    }
};

// Function to insert a node at the end of the linked list
void insertNode(Node*& head, int value) {
    Node* newNode = new Node(value);
    if (head == nullptr) {
        head = newNode;
    } else {
        Node* temp = head;
        while (temp->next != nullptr) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

// Function to print the linked list
void printList(Node* head) {
    Node* temp = head;
    while (temp != nullptr) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

// Function to perform bubble sort on the linked list
void bubbleSort(Node* head) {
    if (head == nullptr) return;  // If the list is empty

    bool swapped;
    Node* current;
    Node* last = nullptr;

    do {
        swapped = false;
        current = head;

        // Traverse the list and compare adjacent nodes
        while (current->next != last) {
            if (current->data > current->next->data) {
                // Swap data of the current node and next node
                int temp = current->data;
                current->data = current->next->data;
                current->next->data = temp;

                swapped = true;
            }
            current = current->next;
        }
        last = current;
    } while (swapped);  // Continue until no swaps are needed
}

int main() {
    Node* head = nullptr;

    // Insert nodes into the linked list
    int n, value;
    cout << "Enter the number of elements in the linked list: ";
    cin >> n;
    cout << "Enter the elements:" << endl;
    for (int i = 0; i < n; i++) {
        cin >> value;
        insertNode(head, value);
    }

    cout << "Original linked list: ";
    printList(head);

    // Perform bubble sort
    bubbleSort(head);

    cout << "Sorted linked list: ";
    printList(head);

    return 0;
}

