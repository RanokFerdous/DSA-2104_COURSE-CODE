#include <bits/stdc++.h>
using namespace std;

// Partition function for QuickSort
int partitioned (int arr[], int s, int e) {  //  after this function finish: we get
    int pivot = arr[e]; // Use the last element as the pivot
    int i = s - 1;      // Index for smaller elements

    for (int j = s; j <= e - 1; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(arr[i], arr[j]); // Swap elements
        }
    }

    // Place the pivot in the correct position
    i++;
    swap(arr[i], arr[e]);
    return i; // Return pivot index
}


void quickSort(int arr[], int s, int e) {
    if (s >= e) {
        return; // Base case
    }

    int pivot = partitioned(arr, s, e); // Partition the array

    quickSort(arr, s, pivot - 1); // Recursively sort the left part
    quickSort(arr, pivot + 1, e); // Recursively sort the right part
}

int main() {
    int arr[] = {8, 2, 5, 3, 9, 4, 7, 6, 1};
    int n = sizeof(arr) / sizeof(arr[0]); // Get the size of the array

    quickSort(arr, 0, n - 1); // Call QuickSort

    // Print the sorted array
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    return 0;
}
